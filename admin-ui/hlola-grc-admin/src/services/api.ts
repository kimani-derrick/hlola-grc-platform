const API_BASE_URL =
  process.env.NEXT_PUBLIC_API_URL ??
  (process.env.NODE_ENV === 'production' ? 'https://api.hlola.io' : 'http://localhost:3001');

interface ApiResponse<T = any> {
  success: boolean;
  message?: string;
  data?: T;
  error?: string;
}

interface FrameworksResponse {
  success: boolean;
  message?: string;
  frameworks: Framework[];
  pagination: {
    total: number;
    limit: number | null;
    offset: number;
  };
}

interface ControlsResponse {
  success: boolean;
  message?: string;
  controls: Control[];
  pagination: {
    total: number;
    limit: number | null;
    offset: number;
  };
}

interface TasksResponse {
  success: boolean;
  message?: string;
  tasks: Task[];
  pagination: {
    total: number;
    limit: number | null;
    offset: number;
  };
}

interface LoginRequest {
  email: string;
  password: string;
}

interface LoginResponse {
  token: string;
  admin: {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
  };
}

interface ChangePasswordRequest {
  currentPassword: string;
  newPassword: string;
}

// Framework interfaces
interface Framework {
  id: string;
  name: string;
  description: string;
  version?: string;
  region: string;
  country?: string;
  category: string;
  type: string;
  icon?: string;
  color: string;
  compliance_deadline?: string;
  priority: string;
  risk_level: string;
  status: string;
  requirements_count: number;
  applicable_countries: string[];
  industry_scope: string;
  created_at: string;
  updated_at: string;
  is_active: boolean;
  max_fine_amount: string;
  max_fine_currency: string;
}

interface CreateFrameworkRequest {
  name: string;
  description: string;
  version?: string;
  category: string;
  region: string;
  country?: string;
  type?: string;
  icon?: string;
  color?: string;
  complianceDeadline?: string;
  priority?: string;
  riskLevel?: string;
  status?: string;
  requirementsCount?: number;
  applicableCountries?: string[];
  industryScope?: string;
  maxFineAmount?: string;
  maxFineCurrency?: string;
}

// Control interfaces
interface Control {
  id: string;
  framework_id: string;
  control_id: string;
  title: string;
  description: string;
  category: string;
  subcategory?: string;
  priority: string;
  implementation_level?: string;
  status: string;
  tasksCount?: number;
  complianceScore?: number;
  created_at: string;
  updated_at: string;
}

interface CreateControlRequest {
  frameworkId: string;
  controlId: string;
  title: string;
  description: string;
  category: string;
  subcategory?: string;
  priority: string;
  implementationLevel?: string;
  businessImpact?: string;
  technicalRequirements?: string;
  legalRequirements?: string;
  implementationGuidance?: string;
  testingProcedures?: string;
  evidenceRequirements?: string[];
}

// Task interfaces
interface Task {
  id: string;
  control_id: string;
  title: string;
  description: string;
  category: string;
  priority: string;
  frequency: string;
  estimated_hours: number;
  status: string;
  dueDate?: string;
  progress?: number;
  created_at: string;
  updated_at: string;
}

interface CreateTaskRequest {
  controlId: string;
  title: string;
  description: string;
  status?: string;
  priority?: string;
  category?: string;
  assigneeId?: string;
  dueDate?: string;
  estimatedHours?: number;
  taskType?: string;
  autoGenerated?: boolean;
}

class ApiService {
  private getAuthHeaders(): HeadersInit {
    const token = typeof window !== 'undefined' ? localStorage.getItem('admin_token') : null;
    return {
      'Content-Type': 'application/json',
      ...(token && { Authorization: `Bearer ${token}` }),
    };
  }

  private async makeRequest<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    const url = `${API_BASE_URL}${endpoint}`;
    
    const config: RequestInit = {
      ...options,
      headers: {
        ...this.getAuthHeaders(),
        ...options.headers,
      },
    };

    try {
      console.log('Making API request to:', url);
      const response = await fetch(url, config);
      console.log('Response status:', response.status);
      
      const data = await response.json();

      if (!response.ok) {
        console.error('API request failed:', data);
        return {
          success: false,
          error: data.error || 'Request failed',
          message: data.message || 'An error occurred',
        };
      }

      console.log('API request successful:', data);
      return data;
    } catch (error) {
      console.error('API request failed:', error);
      console.error('Request URL:', url);
      console.error('Request config:', config);
      return {
        success: false,
        error: 'Network error',
        message: `Unable to connect to the server: ${error instanceof Error ? error.message : 'Unknown error'}`,
      };
    }
  }

  // Authentication methods
  async login(credentials: LoginRequest): Promise<ApiResponse<LoginResponse>> {
    return this.makeRequest<LoginResponse>('/api/admin/auth/login', {
      method: 'POST',
      body: JSON.stringify(credentials),
    });
  }

  async getCurrentAdmin(): Promise<ApiResponse<LoginResponse['admin']>> {
    return this.makeRequest<LoginResponse['admin']>('/api/admin/auth/me');
  }

  async changePassword(passwords: ChangePasswordRequest): Promise<ApiResponse> {
    return this.makeRequest('/api/admin/auth/change-password', {
      method: 'PUT',
      body: JSON.stringify(passwords),
    });
  }

  // Token management
  setToken(token: string): void {
    if (typeof window !== 'undefined') {
      localStorage.setItem('admin_token', token);
    }
  }

  getToken(): string | null {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('admin_token');
    }
    return null;
  }

  removeToken(): void {
    if (typeof window !== 'undefined') {
      localStorage.removeItem('admin_token');
    }
  }

  // Check if user is authenticated
  isAuthenticated(): boolean {
    return !!this.getToken();
  }

  // Framework CRUD methods
  async getFrameworks(): Promise<FrameworksResponse> {
    return this.makeRequest('/api/admin/frameworks') as Promise<FrameworksResponse>;
  }

  async getFramework(id: string): Promise<ApiResponse<Framework>> {
    return this.makeRequest<Framework>(`/api/admin/frameworks/${id}`);
  }

  async createFramework(data: CreateFrameworkRequest): Promise<ApiResponse<Framework>> {
    return this.makeRequest<Framework>('/api/admin/frameworks', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updateFramework(id: string, data: Partial<CreateFrameworkRequest>): Promise<ApiResponse<Framework>> {
    return this.makeRequest<Framework>(`/api/admin/frameworks/${id}`, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async deleteFramework(id: string): Promise<ApiResponse> {
    return this.makeRequest(`/api/admin/frameworks/${id}`, {
      method: 'DELETE',
    });
  }

  // Control CRUD methods
  async getControls(): Promise<ControlsResponse> {
    return this.makeRequest('/api/admin/controls') as Promise<ControlsResponse>;
  }

  async getControl(id: string): Promise<ApiResponse<Control>> {
    return this.makeRequest<Control>(`/api/admin/controls/${id}`);
  }

  async getControlsByFramework(frameworkId: string): Promise<ApiResponse<Control[]>> {
    return this.makeRequest<Control[]>(`/api/admin/controls/framework/${frameworkId}`);
  }

  async createControl(data: CreateControlRequest): Promise<ApiResponse<Control>> {
    return this.makeRequest<Control>('/api/admin/controls', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updateControl(id: string, data: Partial<CreateControlRequest>): Promise<ApiResponse<Control>> {
    return this.makeRequest<Control>(`/api/admin/controls/${id}`, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async deleteControl(id: string): Promise<ApiResponse> {
    return this.makeRequest(`/api/admin/controls/${id}`, {
      method: 'DELETE',
    });
  }

  // Task CRUD methods
  async getTasks(): Promise<TasksResponse> {
    return this.makeRequest('/api/admin/tasks') as Promise<TasksResponse>;
  }

  async getTask(id: string): Promise<ApiResponse<Task>> {
    return this.makeRequest<Task>(`/api/admin/tasks/${id}`);
  }

  async getTasksByControl(controlId: string): Promise<ApiResponse<Task[]>> {
    return this.makeRequest<Task[]>(`/api/admin/tasks/controls/${controlId}`);
  }

  async getTasksByFramework(frameworkId: string): Promise<ApiResponse<Task[]>> {
    return this.makeRequest<Task[]>(`/api/admin/tasks/frameworks/${frameworkId}`);
  }

  async createTask(data: CreateTaskRequest): Promise<ApiResponse<Task>> {
    return this.makeRequest<Task>('/api/admin/tasks', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updateTask(id: string, data: Partial<CreateTaskRequest>): Promise<ApiResponse<Task>> {
    return this.makeRequest<Task>(`/api/admin/tasks/${id}`, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async deleteTask(id: string): Promise<ApiResponse> {
    return this.makeRequest(`/api/admin/tasks/${id}`, {
      method: 'DELETE',
    });
  }
}

export default new ApiService();

// Export interfaces for use in components
export type {
  Framework,
  CreateFrameworkRequest,
  Control,
  CreateControlRequest,
  Task,
  CreateTaskRequest,
  ApiResponse,
  FrameworksResponse,
  ControlsResponse,
  TasksResponse,
  LoginRequest,
  LoginResponse,
  ChangePasswordRequest
};
