const { pool } = require('../config/database');
const Task = require('../models/Task');
const logger = require('../config/logger');

/**
 * Creates task assignments for all controls that are assigned to an entity
 * This creates NEW tasks for each organization instead of reusing existing ones
 * @param {string} entityId - The entity ID to create task assignments for
 * @param {string} controlId - Optional control ID to limit to specific control
 * @returns {Promise<number>} - Number of task assignments created
 */
async function createTaskAssignmentsForEntity(entityId, controlId = null) {
  try {
    // First, get the entity and its organization
    const entityResult = await pool.query(`
      SELECT e.id, e.organization_id, e.name as entity_name
      FROM entities e
      WHERE e.id = $1
    `, [entityId]);
    
    if (entityResult.rows.length === 0) {
      throw new Error(`Entity ${entityId} not found`);
    }
    
    const entity = entityResult.rows[0];
    const organizationId = entity.organization_id;
    
    logger.info('Creating task assignments for entity', {
      entityId,
      organizationId,
      entityName: entity.entity_name
    });
    
    // Get all controls assigned to this entity
    let controlQuery = `
      SELECT 
        ca.control_id,
        c.title as control_title,
        c.framework_id,
        f.name as framework_name
      FROM control_assignments ca
      JOIN controls c ON ca.control_id = c.id
      JOIN frameworks f ON c.framework_id = f.id
      WHERE ca.entity_id = $1
    `;
    
    const params = [entityId];
    
    if (controlId) {
      controlQuery += ` AND c.id = $2`;
      params.push(controlId);
    }
    
    const controlResult = await pool.query(controlQuery, params);
    const controls = controlResult.rows;
    
    logger.info(`Found ${controls.length} controls assigned to entity`, {
      entityId,
      controls: controls.map(c => ({ id: c.control_id, title: c.control_title }))
    });
    
    let totalAssignmentsCreated = 0;
    
    // For each control, create new tasks and task assignments
    for (const control of controls) {
      try {
        // Check if task assignments already exist for this control and entity
        const existingAssignments = await pool.query(`
          SELECT ta.id, ta.task_id, ta.entity_id, ta.status
          FROM task_assignments ta
          JOIN tasks t ON ta.task_id = t.id
          WHERE t.control_id = $1 AND ta.entity_id = $2
        `, [control.control_id, entityId]);
        
        if (existingAssignments.rows && existingAssignments.rows.length > 0) {
          logger.debug('Task assignments already exist for control', {
            controlId: control.control_id,
            controlTitle: control.control_title,
            existingAssignmentCount: existingAssignments.rows.length
          });
          continue;
        }
        
        // Create new tasks for this control
        const taskData = {
          organizationId: organizationId,
          entityId: entityId,
          frameworkId: control.framework_id,
          controlId: control.control_id,
          title: `Complete: ${control.control_title}`,
          description: `Complete the compliance requirement: ${control.control_title}`,
          status: 'not-started',
          priority: 'medium',
          category: 'compliance',
          assigneeId: null,
          dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
          estimatedHours: 4,
          taskType: 'compliance',
          autoGenerated: true
        };
        
        const newTask = await Task.create(taskData);
        
        // Create task assignment
        const assignmentResult = await pool.query(`
          INSERT INTO task_assignments (
            task_id, 
            entity_id, 
            status, 
            priority, 
            created_at, 
            updated_at
          ) VALUES ($1, $2, $3, $4, NOW(), NOW())
          ON CONFLICT (task_id, entity_id) DO NOTHING
        `, [newTask.id, entityId, 'not-started', 'medium']);
        
        if (assignmentResult.rowCount > 0) {
          totalAssignmentsCreated++;
          logger.info('Created task and assignment', {
            taskId: newTask.id,
            controlId: control.control_id,
            controlTitle: control.control_title,
            entityId
          });
        }
        
      } catch (error) {
        logger.error('Error creating task for control', {
          error: error.message,
          controlId: control.control_id,
          controlTitle: control.control_title,
          entityId
        });
        // Continue with other controls
      }
    }
    
    logger.info('Task assignment creation completed', {
      entityId,
      totalAssignmentsCreated,
      controlsProcessed: controls.length
    });
    
    return totalAssignmentsCreated;
    
  } catch (error) {
    console.error('Error creating task assignments for entity:', error);
    throw error;
  }
}

/**
 * Creates task assignments for all entities in an organization that have control assignments
 * @param {string} organizationId - The organization ID
 * @returns {Promise<number>} - Number of task assignments created
 */
async function createTaskAssignmentsForOrganization(organizationId) {
  try {
    // Get all entities in this organization that have control assignments
    const entitiesResult = await pool.query(`
      SELECT DISTINCT ca.entity_id
      FROM control_assignments ca
      JOIN entities e ON ca.entity_id = e.id
      WHERE e.organization_id = $1
    `, [organizationId]);
    
    const entityIds = entitiesResult.rows.map(row => row.entity_id);
    
    logger.info('Creating task assignments for organization', {
      organizationId,
      entityCount: entityIds.length
    });
    
    let totalAssignmentsCreated = 0;
    
    // Create task assignments for each entity
    for (const entityId of entityIds) {
      try {
        const assignmentsCreated = await createTaskAssignmentsForEntity(entityId);
        totalAssignmentsCreated += assignmentsCreated;
      } catch (error) {
        logger.error('Error creating task assignments for entity in organization', {
          error: error.message,
          entityId,
          organizationId
        });
        // Continue with other entities
      }
    }
    
    logger.info('Organization task assignment creation completed', {
      organizationId,
      totalAssignmentsCreated,
      entitiesProcessed: entityIds.length
    });
    
    return totalAssignmentsCreated;
    
  } catch (error) {
    logger.error('Error creating task assignments for organization:', error);
    throw error;
  }
}

/**
 * Ensures task assignments exist for a specific control assignment
 * @param {string} entityId - The entity ID
 * @param {string} controlId - The control ID
 * @returns {Promise<number>} - Number of task assignments created
 */
async function ensureTaskAssignmentsForControl(entityId, controlId) {
  return await createTaskAssignmentsForEntity(entityId, controlId);
}

module.exports = {
  createTaskAssignmentsForEntity,
  createTaskAssignmentsForOrganization,
  ensureTaskAssignmentsForControl
};
